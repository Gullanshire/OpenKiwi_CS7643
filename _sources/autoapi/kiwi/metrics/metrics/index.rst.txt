:mod:`kiwi.metrics.metrics`
===========================

.. py:module:: kiwi.metrics.metrics


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   kiwi.metrics.metrics.Metric
   kiwi.metrics.metrics.NLLMetric
   kiwi.metrics.metrics.LabeledMetric
   kiwi.metrics.metrics.CorrectMetric
   kiwi.metrics.metrics.F1MultMetric
   kiwi.metrics.metrics.MatthewsMetric
   kiwi.metrics.metrics.SentenceMetric
   kiwi.metrics.metrics.PearsonMetric
   kiwi.metrics.metrics.SpearmanMetric
   kiwi.metrics.metrics.RMSEMetric
   kiwi.metrics.metrics.PerplexityMetric
   kiwi.metrics.metrics.ExpectedErrorMetric
   kiwi.metrics.metrics.ThresholdCalibrationMetric
   kiwi.metrics.metrics.MovingMetric
   kiwi.metrics.metrics.MovingF1
   kiwi.metrics.metrics.MovingSkipsAtQuality



.. py:class:: Metric(*targets, prefix=None)

   .. attribute:: _name
      

      

   .. attribute:: best_ordering
      :annotation: = max

      

   .. method:: step(self, model_out, batch, losses)
      :abstractmethod:


   .. method:: compute(self, steps, prefix='')
      :abstractmethod:


   .. method:: name(self)
      :property:


   .. method:: num_tokens(self, batch, *targets)



.. py:class:: NLLMetric(*targets, prefix=None)

   Bases: :class:`kiwi.metrics.metrics.Metric`

   .. attribute:: _name
      :annotation: = NLL

      

   .. attribute:: best_ordering
      :annotation: = min

      

   .. method:: step(self, model_out, batch, losses)


   .. method:: compute(self, steps, prefix='')



.. py:class:: LabeledMetric(*args, labels=None, **kwargs)

   Bases: :class:`kiwi.metrics.metrics.Metric`, :class:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. method:: step(self, model_out, batch, losses)


   .. method:: get_target_flat(self, batch)


   .. method:: get_predictions_flat(self, model_out, batch)



.. py:class:: CorrectMetric(*args, labels=None, **kwargs)

   Bases: :class:`kiwi.metrics.metrics.LabeledMetric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: _name
      :annotation: = CORRECT

      

   .. method:: step(self, model_out, batch, losses)


   .. method:: compute(self, steps, prefix='')



.. py:class:: F1MultMetric(*args, labels=None, **kwargs)

   Bases: :class:`kiwi.metrics.metrics.LabeledMetric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: _name
      :annotation: = F1_MULT

      

   .. method:: compute(self, steps, prefix='')



.. py:class:: MatthewsMetric(*args, labels=None, **kwargs)

   Bases: :class:`kiwi.metrics.metrics.LabeledMetric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: _name
      :annotation: = MCC

      

   .. method:: compute(self, steps, prefix='')



.. py:class:: SentenceMetric(*targets, prefix=None)

   Bases: :class:`kiwi.metrics.metrics.Metric`, :class:`abc.ABC`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. method:: step(self, model_out, batch, losses)



.. py:class:: PearsonMetric(*targets, prefix=None)

   Bases: :class:`kiwi.metrics.metrics.SentenceMetric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: _name
      :annotation: = PEARSON

      

   .. method:: compute(self, steps, prefix='')



.. py:class:: SpearmanMetric(*targets, prefix=None)

   Bases: :class:`kiwi.metrics.metrics.SentenceMetric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: _name
      :annotation: = SPEARMAN

      

   .. method:: compute(self, steps, prefix='')



.. py:class:: RMSEMetric(*targets, prefix=None)

   Bases: :class:`kiwi.metrics.metrics.SentenceMetric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: _name
      :annotation: = RMSE

      

   .. attribute:: best_ordering
      :annotation: = min

      

   .. method:: compute(self, steps, prefix='')



.. py:class:: PerplexityMetric(*targets, prefix=None)

   Bases: :class:`kiwi.metrics.metrics.Metric`

   .. attribute:: _name
      :annotation: = PERP

      

   .. attribute:: best_ordering
      :annotation: = min

      

   .. method:: step(self, model_out, batch, losses)


   .. method:: compute(self, steps, prefix='')



.. py:class:: ExpectedErrorMetric(*args, labels=None, **kwargs)

   Bases: :class:`kiwi.metrics.metrics.LabeledMetric`

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. attribute:: _name
      :annotation: = ExpErr

      

   .. attribute:: best_ordering
      :annotation: = min

      

   .. method:: step(self, model_out, batch, losses)


   .. method:: compute(self, steps, prefix='')



.. py:class:: ThresholdCalibrationMetric(target_id=0, **kwargs)

   Bases: :class:`kiwi.metrics.metrics.Metric`

   .. method:: update(self, model_out, batch, **kwargs)


   .. method:: summarize(self)


   .. method:: reset(self)



.. py:class:: MovingMetric

   Class to compute the changes in one metric as a function of a second metric.

   Example: F1 score vs. Classification Threshold, Quality vs Skips

   .. method:: eval(self, scores, labels)

      Compute the graph metric1 vs metric2.

      :param scores: model outputs.
      :param labels: corresponding labels.


   .. method:: init(self, scores, labels)

      Initialize the Metric for threshold < min(scores).


   .. method:: sort(self, scores, labels)

      Sort List of labels and scores.


   .. method:: update(self, score, label)

      Move the threshold past score.


   .. method:: compute(self)

      Compute the current value of the metric.


   .. method:: choose(self, thresholds)

      Choose the best (threshold, metric) tuple from an iterable.



.. py:class:: MovingF1

   Bases: :class:`kiwi.metrics.metrics.MovingMetric`

   Class to compute the changes in one metric as a function of a second metric.

   Example: F1 score vs. Classification Threshold, Quality vs Skips

   .. method:: init(self, scores, labels, class_idx=1)

      Compute F1-Mult for all decision thresholds over (scores, labels).

      Initialize the threshold s.t. all examples are classified as `class_idx`.

      :param scores: likelihood scores for class index.
      :param labels: gold truth classes in {0,1}.
      :param class_idx: ID of class.


   .. method:: update(self, score, label)

      Move the decision threshold.


   .. method:: compute(self)

      Compute the current value of the metric.


   .. method:: choose(self, thresholds)

      Choose the best (threshold, metric) tuple from an iterable.



.. py:class:: MovingSkipsAtQuality(scores_higher_is_better=False, labels_higher_is_better=False)

   Bases: :class:`kiwi.metrics.metrics.MovingMetric`

   Class to compute the changes in one metric as a function of a second metric.

   Example: F1 score vs. Classification Threshold, Quality vs Skips

   .. method:: eval(self, scores, labels)

      :param scores: model output quality or error scores. If quality scores
                     are provided, pass ``scores_higher_is_better=True``.
      :param labels: ground truth quality or error scores. If quality scores
                     are provided, pass ``labels_higher_is_better=True``.


   .. method:: init(self, scores, labels)

      :param scores: model output quality or error scores. If quality scores are
                     provided, pass ``scores_higher_is_better=True``.
      :param labels: ground truth quality or error scores. If quality scores are
                     provided, pass ``labels_higher_is_better=True``.


   .. method:: update(self, score, label)

      Move the threshold past score.


   .. method:: compute(self)

      Compute the current value of the metric.


   .. method:: choose(self, thresholds, target_qual)

      Choose the smallest threshold such that average quality is greater than or
      equal to target_qual.


   .. method:: sort(self, scores, labels)

      Sort List of labels and scores.



